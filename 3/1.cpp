#include<cstdio>
int main()
{
    int A[3][6]={{1,2,3,1,0,0},{4,7,10,0,1,0},{14,22,31,0,0,1}};
    printf("求A矩阵的逆矩阵，在A矩阵后加入E矩阵：\n");
    for(int k=0;k<3;k++)
        for(int j=0;j<6;j++)
            {
                printf("%d   ",A[k][j]);
                if(j==5)
                    printf("\n");
            }
    printf("\n");
    int b;
    b=A[1][0]/A[0][0];
    for(int i=0;i<6;i++)
        A[1][i]=A[1][i]-(b*A[0][i]);
    b=A[2][0]/A[0][0];
    for(int i=0;i<6;i++)
        A[2][i]-=(b*A[0][i]);
    for(int i=1;i<6;i++)
        A[1][i]*=-1;
    b=A[0][1]/A[1][1];
    for(int i=1;i<6;i++)
        A[0][i]-=(b*A[1][i]);
    b=A[2][1]/A[1][1];
    for(int i=1;i<6;i++)
        A[2][i]-=(b*A[1][i]);
    b=A[0][2]/A[2][2];
    for(int i=2;i<6;i++)
        A[0][i]-=(b*A[2][i]);
    b=A[1][2]/A[2][2];
    for(int i=2;i<6;i++)
        A[1][i]-=(b*A[2][i]);
    printf("逆矩阵运算完成后得出的结果：\n");
    for(int k=0;k<3;k++)
        for(int j=0;j<6;j++)
            {
                printf("%d   ",A[k][j]);
                if(j==5)
                    printf("\n");
            }
    printf("\n");
    int A1[3][3];
    for(int k=0;k<3;k++)
        for(int j=0;j<3;j++)
            A1[k][j]=A[k][j+3];
    printf("得出A的逆矩阵A-1：\n");
    for(int k=0;k<3;k++)
        for(int j=0;j<3;j++)
            {
                printf("%d   ",A1[k][j]);
                if(j==2)
                    printf("\n");
            }
    printf("\n");
    //至此，求A的逆矩阵完成
    int B[3][3]={{4,1,-2},{14,4,-6},{45,14,-17}};
    printf("B矩阵：\n");
    for(int k=0;k<3;k++)
        for(int j=0;j<3;j++)
            {
                printf("%d   ",B[k][j]);
                if(j==2)
                    printf("\n");
            }
    printf("\n");
    int X[3][3];
    for(int k=0;k<3;k++)
        for(int j=0;j<3;j++)
            X[k][j]=A1[k][0]*B[0][j]+A1[k][1]*B[1][j]+A1[k][2]*B[2][j];
    printf("得出X矩阵：\n");
    for(int k=0;k<3;k++)
        for(int j=0;j<3;j++)
            {
                printf("%d   ",X[k][j]);
                if(j==2)
                    printf("\n");
            }
    printf("\n");
    return 0;
}
/*  矩阵相乘的完整算法
    X[0][0]=A1[0][0]*B[0][0]+A1[0][1]*B[1][0]+A1[0][2]*B[2][0];
    X[0][1]=A1[0][0]*B[0][1]+A1[0][1]*B[1][1]+A1[0][2]*B[2][1];
    X[0][2]=A1[0][0]*B[0][2]+A1[0][1]*B[1][2]+A1[0][2]*B[2][2];
    X[1][0]=A1[1][0]*B[0][0]+A1[1][1]*B[1][0]+A1[1][2]*B[2][0];
    X[1][1]=A1[1][0]*B[0][1]+A1[1][1]*B[1][1]+A1[1][2]*B[2][1];
    X[1][2]=A1[1][0]*B[0][2]+A1[1][1]*B[1][2]+A1[1][2]*B[2][2];
    X[2][0]=A1[2][0]*B[0][0]+A1[2][1]*B[1][0]+A1[2][2]*B[2][0];
    X[2][1]=A1[2][0]*B[0][1]+A1[2][1]*B[1][1]+A1[2][2]*B[2][1];
    X[2][2]=A1[2][0]*B[0][2]+A1[2][1]*B[1][2]+A1[2][2]*B[2][2];
*/
